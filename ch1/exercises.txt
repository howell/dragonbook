1.1.1 A compiler takes a source program and outputs another program that may
be executed on some input to produce some output (or compiled). An interpreter
takes a source program and its input and produces some output. In some ways an
interpreter directly 'runs' a program, while the compiler creates another
program which runs the original program.

1.1.2 An advantage of a compiler over an interpreter is often in performance,
with compiled programs running much faster than interpreted ones. However,
interpreted programs can be easier to debug. Another interesting difference is
in portability. A compiled program (assuming compiled to machine code) is
runnable on all machines of a particular architecture (and possibly OS). So a
compiled program could be transfered to a machine that doesn't have an
implementation of that language and run just fine, but it would be useless on
a different architecture. However, an interpreted program can run on all (and
only) machines with a compatible implementation of the interpreter.

1.1.3 Compilers outputting assembly rather than machine code helps both the
users of the compiler and its developers because assembly is easier to read,
debug, and reason about. Any time the output of a compiler needs to be
inspected, say by the developers debugging a feature or users trying to tune
performance, they will to see the assembly version. If the compiler output
wasn't in that form, they'd have to translate it anyway.
It also presumably saves a step of the implementation making thins a little
easier.

1.1.4 Having a compiler target a different source language, such as C, seeks
to impart the benefits of C into the original language. When it comes to C,
there are two obvious advantages: performance and portability. For
performance, there are a number of very mature optimizing compilers, such as
gcc, which could then be used for object code generation. Additionally, all
the target architectures of the intermediate language become available to the
original source language.

1.1.5 Assemblers need to translate opcodes and operands into raw, binary
machine instructions and perform name/label resolution.

1.6.1
w = 13
x = 11
y = 13
z = 11

1.6.2
w = 9
x = 7
y = 13
z = 11

1.6.3
w1: B1-B2
x1: B1
y1: B1-B4
z1: B1, B4
x2: B2
z2: B2-B3
w3: B3
x3: B3
w4: B4-B5
x4: B4-B5
y5: B5
z5: B5

1.6.4
3
2
